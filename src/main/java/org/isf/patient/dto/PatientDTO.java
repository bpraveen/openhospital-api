package org.isf.patient.dto;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.Setter;
import javax.validation.constraints.NotNull;
import java.util.Date;

@ApiModel(description = "Class representing a patient")
@Getter
@Setter
public class PatientDTO {

    private Integer code;

    @NotNull
    @ApiModelProperty(notes = "First name of the patient", example = "Mario", position = 1)
    private String firstName;

    @NotNull
    @ApiModelProperty(notes = "Last name of the patient", example = "Rossi", position = 2)
    private String secondName;

    private String name;

    @ApiModelProperty(notes = "Birth date", example = "1979-05-01", position = 3)
    private Date birthDate;

    @NotNull
    @ApiModelProperty(notes = "Age", example = "40", position = 4)
    private int age;

    @ApiModelProperty(notes = "Age type", example = "null", position = 5)
    private String agetype;

    @NotNull
    @ApiModelProperty(notes = "Sex", allowableValues = "F,M", example = "M", position = 6)
    private char sex;

    @ApiModelProperty(notes = "Address", example = "Via Roma, 12", position = 7)
    private String address;

    @NotNull
    @ApiModelProperty(notes = "City", example = "Verona", position = 8)
    private String city;

    private String nextKin;

    @ApiModelProperty(notes = "Telephone", example = "+393456789012", position = 9)
    private String telephone;

    @ApiModelProperty(notes = "Note", example = "Test insert new patient", position = 10)
    private String note;

    @NotNull
    @ApiModelProperty(notes = "Mother's name", example = "Roberta", position = 11)
    private String mother_name;

    @ApiModelProperty(notes = "Mother's status (D=dead, A=alive)", allowableValues = "D,A", example = "A", position = 12)
    private char mother = ' ';

    @NotNull
    @ApiModelProperty(notes = "Father's name", example = "Giuseppe", position = 13)
    private String father_name;

    @ApiModelProperty(notes = "Father's status (D=dead, A=alive)", allowableValues = "D,A", example = "D", position = 14)
    private char father = ' ';

    @NotNull
    @ApiModelProperty(notes = "Blood type (0-/+, A-/+ , B-/+, AB-/+)", allowableValues = "0-,0+,A-,A+,B-,B+,AB-,AB+", example = "A+", position = 15)
    private String bloodType;

    @ApiModelProperty(notes = "hasInsurance (Y=Yes, N=no)", allowableValues = "Y,N", example = "N", position = 16)
    private char hasInsurance = ' ';

    @ApiModelProperty(notes = "Parent together (Y=Yes, N=no)", allowableValues = "Y,N", example = "N", position = 17)
    private char parentTogether = ' ';

    @ApiModelProperty(notes = "Tax code", example = "RSSMRA79E01L781N", position = 18)
    private String taxCode;

    @ApiModelProperty(notes = "Height", example = "174", position = 19)
    private float height;

    @ApiModelProperty(notes = "Weight", example = "73", position = 20)
    private float weight;

    private int lock;

    @ApiModelProperty(notes = "BlobPhoto", example = "", position = 21)
    private byte[] blobPhoto;

    private int hashCode = 0;

    @ApiModelProperty(hidden = true)
    public Integer getCode() {
        return code;
    }

    @ApiModelProperty(hidden = true)
    public String getName() {
        return name;
    }

    @ApiModelProperty(hidden = true)
    public String getNextKin() {
        return nextKin;
    }

    @ApiModelProperty(hidden = true)
    public int getLock() {
        return lock;
    }

    @ApiModelProperty(hidden = true)
    public int getHashCode() {
        return hashCode;
    }
}
